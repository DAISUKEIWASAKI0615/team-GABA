#pragma once
#include"main.h"

#define GIMMICK_SIZE 9
#define lpMap map::GetInstance()

typedef enum
{
	STAGE1,
	STAGE2
}MAPS;

class map
{
public:
	static map& GetInstance()
	{
		static map s_Instance;
		return s_Instance;
	}

	int blocks[15];
	int back[3];
	int pipe[4];
	int flag[2];
	int mountain[6];
	int grass;
	int goal[8];
	int castle;
	float moveB[GIMMICK_SIZE];
	bool centerFlg;
	float vl[GIMMICK_SIZE];
	int backChips[MAP_HEIGHT][MAP_WIDTH] =
	{
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
	};

	int mapData[MAP_HEIGHT][MAP_WIDTH];

	int resetMapData[MAP_HEIGHT][MAP_WIDTH] =
	{
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,9 ,9 ,9 ,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,9,  9,9,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,9,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,9 ,9 ,9 ,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,9,  9,9,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,9,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,7,7 ,7 ,7 ,2,  2,2,2,2,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,9,  9,9,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,9,9,9,9,9,9,9,9,  9,9,9,9,25,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,17,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,9 ,9 ,9 ,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,9,  9,9,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,9,9,9,9,9,4,9,9,  9,9,9,9,26,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,9 ,9 ,9 ,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,0 ,9,9 ,9,9,9,9,9,9,9,  9,5,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,9,9,9,9,4,4,9,9,  9,9,9,9,27,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,9 ,9 ,9 ,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,9,  9,9,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,9,9,9,4,4,4,9,9,  9,9,9,9,28,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,9 ,9 ,9 ,9,  9,9,9,2,9,9,9 ,9 ,9 ,9,9,9,9,9,8,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,9,  9,9,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,9,9,4,4,4,4,9,9,  9,9,9,9,29,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,0,9,9,9,0 ,2,0 ,2,0,  9,9,9,9,9 ,9, 9,9,9,9,9,9 ,9 ,9,9,9,  9,9,5,9,9,9,9,9,2,0,2,9,9 ,9 ,9 ,5,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,2,2,2,  9,9,9,9,34,9,35,9,36,9,9,9,9,9,9,9,  9,9,9,9,9,9,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,2 ,  2 ,0 ,2 ,9 ,9 ,9 ,9,9,9,4,4,4,4,4,9,9,  9,9,9,9,30,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,9 ,9 ,9 ,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,9 ,9, 9,9,9,9,9,10,11,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,9 ,9 ,9 ,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,9,  4,9,9,9,9,4,9,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,9,4,4,4,4,4,4,9,9,  9,9,9,9,31,9,9,9,9,9,9,15,9,9,9,9,
		9,9,18,19,20,9,9,9,9,9,9,9 ,9,9 ,9,9,  9,9,9,9,10,11,9,9,9,9,9,12,13,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,18,19,20,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,9,4,  4,9,9,9,9,4,4,9 ,9 ,9 ,9 ,10,11,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,9,4,4,4,4,4,4,4,9,9,  9,9,9,9,32,9,9,9,9,9,9,9 ,9,9,9,9,
		9,9,21,22,23,9,9,9,9,9,9,24,9,9 ,9,9,  9,9,9,9,12,13,9,9,9,9,9,12,13,9,9,9,  9,9,9,9,9,9,9,9,9,9,9,9,21,22,23,9,  9,9,9,9,9,9,9 ,9 ,9 ,9,9,9,9,9,9,9,  9,9,9,9,9 ,9,9 ,9,9 ,9,9,9,9,9,4,4,  4,9,9,9,9,4,4,9 ,9 ,9 ,9 ,12,13,9 ,9 ,9 ,  9 ,9 ,9 ,9 ,9 ,9 ,4,4,4,4,4,4,4,4,9,9,  9,9,9,9,4 ,9,9,9,9,9,9,9 ,9,9,9,9,
		3,3,3 ,3 ,3 ,3,3,3,3,3,3,3 ,6,6 ,3,3,  3,3,3,3,3 ,3, 3,3,3,3,3,3, 3 ,3,3,3,  3,3,9,9,9,9,3,3,3,3,3,3,3 ,3 ,3 ,9,  9,9,9,3,3,3,16,16,16,3,3,3,3,3,3,3,  3,3,3,3,3 ,3,3 ,3,3 ,3,3,3,3,3,3,3,  3,9,9,9,9,3,3,33,33,33,33,3 ,3 ,37,37,37,  37,37,37,37,37,37,3,3,3,3,3,3,3,3,3,3,  3,3,3,3,3 ,3,3,3,3,3,3,3 ,3,3,3,3
	};

	int maps[1] = { mapData[MAP_HEIGHT][MAP_WIDTH] };

	bool blocksFlg[MAP_HEIGHT][MAP_WIDTH];
	float mapPosX,mapPosY;
	float cameraX,cameraY;
	float gimPosY[GIMMICK_SIZE];
	int bgm;

	void Init();
	void Draw();
	void Update();
	int MapHitCheck(float X, float Y, float *MoveX, float *MoveY,bool flg);
	int MapHitCheck(float X, float Y, float *MoveX, float *MoveY);
	MAPS stages;

	int GetChipParam(float X, float Y);
	float WorldToScreenX(float p);
	float WorldToScreenY(float p);
	void BlocksEffects(float X,float Y, bool flg1, bool flg2);
	bool GetChipsFlag(float X, float Y);

private:
	map();
	virtual ~map();
	void MapGimmick();
};

